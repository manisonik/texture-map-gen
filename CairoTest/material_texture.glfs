#version 440 core

struct Material 
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};
	
struct Light
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

//layout (binding = 0) uniform sampler2D tex;
uniform sampler2D tex;

// Values that stay constant for the whole mesh
uniform Material material;
uniform Light light;
uniform vec3 viewPos;

// Input color from vertex shader
in vec4 color;
in vec2 uv;
in vec3 normal;
in vec3 fragPos;

// Output
out vec4 outColor;

void main()
{
	// Ambient
	vec3 ambient = light.ambient * material.ambient;
		
	// Diffuse
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * (diff * material.diffuse);
    
	// Specular
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * (spec * material.specular);  

	vec3 result = ambient + diffuse + specular;

	outColor = texture(tex, uv) * vec4(result, 1.0f);
} 