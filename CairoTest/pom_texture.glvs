#version 440 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexColor;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 vertexNormal;
layout(location = 4) in mat4 instanceMatrix;
layout(location = 8) in vec3 vertexTangent;
layout(location = 9) in vec3 vertexBitangent;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform vec3 viewPos;
uniform vec3 lightPos;

// Output data
out vec4 color;
out vec2 uv;
out vec3 normal;
out vec3 fragPos;
out vec3 tangentLightPos;
out vec3 tangentViewPos;
out vec3 tangentFragPos;

void main()
{
	// Fragment position
	fragPos = vec3(instanceMatrix * vec4(vertexPosition_modelspace, 1.0f));

	// Set the TBN matrix
	vec3 T = normalize(mat3(instanceMatrix) * vertexTangent);
	vec3 B = normalize(mat3(instanceMatrix) * vertexBitangent);
	vec3 N = normalize(mat3(instanceMatrix) * vertexNormal);
	mat3 TBN = transpose(mat3(T, B, N));

	tangentLightPos = TBN * lightPos;
	tangentViewPos = TBN * viewPos;
	tangentFragPos = TBN * fragPos;

	// Position of the vertex in clip space
	gl_Position = MVP * vec4(fragPos, 1.0f);

	// Pass on the fragment shader
	color = vertexColor;
	uv = vertexUV;
}